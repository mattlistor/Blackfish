 package main;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import entity.Entity;
import object.OBJ_HealthBar;
import object.OBJ_Golden_Jig;

public class UI {
	
	GamePanel gp;
	Graphics2D g2;
	Font din_24, din_60B, dogica, retro; 
	BufferedImage health_full, health_half, health_empty, image;
	public boolean messageOn = false;
	ArrayList<String> message = new ArrayList<>();
	ArrayList<Integer> messageCounter = new ArrayList<>();
	public boolean gameFinished = false;
	public String currentDialogue = "";
	public int commandNum = 0;
	public int titleScreenState = 0; // 0 = first screen, 1: second screen, etc...
	public int slotCol = 0;
	public int slotRow = 0;
	public int currentDialogueIndex = 0;
	public int characterFrameY, characterFrameHeight;
	public int descriptionTextLineHeight = 20;
	public int charIndex = 0;
	public String combinedText = "";
	public int playerLifeAnimationCounter, dialogueBoxAnimationCounter, itemDescriptionBoxAnimationCounter;
	int counter = 0;

	public int move = 0;
	public int spriteNum = 1;
	public int spriteCounter  = 0;
	public int playerLifeY = 32;
	public int dialogueBoxHeight = 64*3;
	public int dialogueBoxY = 576 - 64 - 32; 
	public int highestBoundDialogueBoxY = dialogueBoxY;
	public int lowestBoundDialogueBoxY = dialogueBoxY+10;
	public String dialogueBoxDirection = "down";

	public int playerLifePositionY[] = new int[] { playerLifeY, playerLifeY+5, playerLifeY+10}; 
	public String playerLifeDirections[] = new String[] { "down", "down", "down"}; 
	public int highestBoundY = playerLifeY;
	public int lowestBoundY = playerLifeY + 10;
	public Entity npc;
	
	public boolean pauseAfterSentence = false;
	public int pauseAfterSentenceCounter = 0; // one second
	
	public int itemDescriptionBoxDeltaY = 0; 
	public String itemDescriptionBoxDirection = "down";




	public UI(GamePanel gp) {
		this.gp = gp;
		
		// FONTS
		din_24 = new Font("DIN",Font.PLAIN, 24);
		din_60B = new Font("DIN",Font.BOLD, 60);
		try {
			InputStream is = getClass().getResourceAsStream("/font/dogica.ttf");
			dogica = Font.createFont(Font.TRUETYPE_FONT, is);
			is = getClass().getResourceAsStream("/font/Retro Gaming.ttf");
			retro = Font.createFont(Font.TRUETYPE_FONT, is);
		} catch (FontFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
				
		// CREATE HEALTH OBJECT
		Entity healthBar = new OBJ_HealthBar(gp);
		health_full = healthBar.image;
		health_half = healthBar.image2;
		health_empty = healthBar.image3;
	}
	public void addMessage(String text) {		
		message.add(text);
		messageCounter.add(0);	
		
	}
	public void draw(Graphics2D g2) {
		
		this.g2 = g2;
		g2.setFont(dogica);
		g2.setColor(Color.white);
		

		// TITLE STATE
		if(gp.gameState == gp.titleState) {
			drawTitleScreen();
		}
		// PLAY STATE
		else if(gp.gameState == gp.playState) {
			drawMessage();
		}
		// PAUSE STATE
		else if(gp.gameState == gp.pauseState) {
			drawPauseScreen(); 
			drawPlayerLife();

		}
		// DIALOGUE STATE
		else if(gp.gameState == gp.dialogueState) {
//			drawPlayerLife();
			drawDialogueScreen(); 
		}
		// CHARACTER STATE
		else if(gp.gameState == gp.characterState) {
			drawCharacterScreen();
			drawInventory();
			drawPlayerLife();
		}
		// GAME OVER STATE
		else if(gp.gameState == gp.gameOverState) {
			drawGameOverScreen();
		}
		// LEVEL TRANSITION STATE
		else if(gp.gameState == gp.levelTransitionState) {
			drawLevelTransitionState();
		}
		// TITLE TRANSITION STATE
		else if(gp.gameState == gp.titleTransitionState) {
			drawTitleTransitionState();
		}
	}
	private void drawTitleTransitionState() {
		counter++;
		g2.setColor(new Color(0, 0, 0, counter*5));
		g2.fillRect(0,  0,  gp.screenWidth,  gp.screenHeight);
		if(counter == 50) {
			counter = 0;
//			gp.gameState = gp.playState;

		}			
	}
	private void drawLevelTransitionState() {
		counter++;
		g2.setColor(new Color(0, 0, 0, counter*5));
		g2.fillRect(0,  0,  gp.screenWidth,  gp.screenHeight);
		if(counter == 50) {
			counter = 0;
			gp.gameState = gp.playState;
			gp.currentMap = gp.eHandler.tempMap;
			gp.player.worldX = gp.tileSize * gp.eHandler.tempCol;
			gp.player.worldY = gp.tileSize * gp.eHandler.tempRow;
			gp.eHandler.previousEventX = gp.player.worldX;
			gp.eHandler.previousEventY = gp.player.worldY;
		}		
	}
	private void drawGameOverScreen() {
		g2.setColor(new Color(0, 24, 13, 150));
		g2.fillRect(0, 0, gp.screenWidth, gp.screenHeight);
		// TITLE NAME
		g2.setFont(g2.getFont().deriveFont(Font.PLAIN, 60));
		String text = "GAME OVER";
		int x = getXforCenteredText(text);
		int y = gp.tileSize*5;
		
		
		// SHADOW
		g2.setColor(new Color(0, 24, 13));
		g2.drawString(text, x+5, y+5);
		
		// TITLE
		g2.setColor(Color.white);
		g2.drawString(text, x, y);
		
		// MENU
		g2.setFont(g2.getFont().deriveFont(Font.PLAIN, 20));
		text = "RETRY";
		x = getXforCenteredText(text)-gp.tileSize;
		y += gp.tileSize*2;
		g2.drawString(text, x, y);
		if(commandNum == 0) {
			g2.drawString(">", x-32, y);
		}
		
		text = "QUIT";
		x = getXforCenteredText(text)+gp.tileSize;
		g2.drawString(text, x, y);
		if(commandNum == 1) {
			g2.drawString(">", x-32, y);
		}
		
	}
	private void drawInventory() {
		
		// FRAME
		int frameHeight = gp.tileSize*2;
		int frameWidth = gp.screenWidth - (gp.tileSize*8); 
		int frameX = gp.screenWidth - ((frameWidth/2)+frameWidth); 
		int frameY = characterFrameY + characterFrameHeight + 30; 
		drawSubWindow(frameX, frameY, frameWidth, frameHeight);
		
		// SLOT
		final int slotXstart = frameX + 10;
		final int slotYstart = frameY + 10;
		int slotX = slotXstart;
		int slotY = slotYstart;
		
		// CURSOR
		int cursorX = slotXstart + (gp.tileSize * slotCol);
		int cursorY = slotYstart + (gp.tileSize * slotRow);
		int cursorWidth = gp.tileSize - (gp.tileSize/3);
		int cursorHeight = gp.tileSize - (gp.tileSize/3);
		
		// DRAW PLAYER'S ITEMS
		for(int i = 0; i < gp.player.inventory.size(); i++) {
			
			// EQUIP CURSOR
			if(gp.player.inventory.get(i) == gp.player.currentWeapon || gp.player.inventory.get(i) == gp.player.currentShield) {
				g2.setColor(new Color(54, 130, 127));
				g2.fillRoundRect(slotX + 5, slotY + 5, cursorHeight-10, cursorHeight - 10, 5, 5);
			}
			if(gp.player.inventory.get(i).image != null) {
				g2.drawImage(gp.player.inventory.get(i).image, slotX + 6, slotY + 6, ((gp.tileSize * 2)/4), ((gp.tileSize * 2)/4), null);
			}
			else {
				g2.drawImage(gp.player.inventory.get(i).down1, slotX + 6, slotY + 6, ((gp.tileSize * 2)/4), ((gp.tileSize * 2)/4), null);
			}
	
			slotX += gp.tileSize;
			if(i == 7 || i == 15) {
				slotX = slotXstart;
				slotY += gp.tileSize;
			}
		}
		
		//DRAW CURSOR
		g2.setColor(Color.white);
		g2.setStroke(new BasicStroke(2));
		g2.drawRoundRect(cursorX, cursorY, cursorWidth, cursorHeight, 5, 5);
		
		// DESCRIPTION FRAME
		int dFrameWidth = gp.tileSize*3;
		int dFrameX = cursorX + cursorWidth+10;
		int itemDescriptionBoxYInitial = cursorY + cursorHeight+10;
		int highestBoundItemDescriptionBoxY = itemDescriptionBoxYInitial;
		int lowestBoundItemDescriptionBoxY = itemDescriptionBoxYInitial+4;
		int itemDescriptionBoxCurrentY = itemDescriptionBoxYInitial+itemDescriptionBoxDeltaY;

		
		// DRAW DESCRIPTION TEXT 
		int textX = dFrameX + 10;
		g2.setFont(g2.getFont().deriveFont(10F));
		
		if(itemDescriptionBoxAnimationCounter > 6) {
			// ADJUST THE ITEM DESCRIPTION BOX'S Y LEVELS AND DIRECTION;
			if (itemDescriptionBoxDirection == "up") {
				if(itemDescriptionBoxCurrentY < highestBoundItemDescriptionBoxY ) {
					itemDescriptionBoxDirection = "down";
				}
			}
			else if (itemDescriptionBoxDirection == "down") {
				if(itemDescriptionBoxCurrentY > lowestBoundItemDescriptionBoxY ) {
					itemDescriptionBoxDirection = "up";

				}
			}
			switch(itemDescriptionBoxDirection) {
				case("down"): itemDescriptionBoxDeltaY += 1; break;
				case("up"): itemDescriptionBoxDeltaY-=1; break;
			}
			itemDescriptionBoxAnimationCounter = 0;
		}	
		itemDescriptionBoxAnimationCounter++;
		System.out.println(itemDescriptionBoxAnimationCounter+" "+itemDescriptionBoxDirection+" "+itemDescriptionBoxCurrentY);
		int textY = itemDescriptionBoxCurrentY + 20;
		
		int itemIndex = getItemIndexOnSlot();
		if(itemIndex < gp.player.inventory.size()) {
			int lines = gp.player.inventory.get(itemIndex).description.split("\n").length;
			
			drawSubWindow(dFrameX, itemDescriptionBoxCurrentY, dFrameWidth, (descriptionTextLineHeight * lines) + 10);
			for(String line: gp.player.inventory.get(itemIndex).description.split("\n")) {
				g2.setColor(Color.white);
				g2.drawString(line, textX, textY);
				textY += descriptionTextLineHeight;
			}
		}
		
		
	}
	public int getItemIndexOnSlot() {
		int itemIndex = slotCol + (slotRow*8);
		return itemIndex;
	}
	private void drawMessage() {
		int messageX = gp.tileSize/2-20;	
		int messageY = gp.tileSize*2;	
		g2.setFont(g2.getFont().deriveFont(Font.PLAIN, 12F));
		
		for(int i = 0; i < message.size(); i++) {
			if(message.get(i) != null) {
				g2.setColor(Color.white);
				g2.drawString(message.get(i), messageX + 25, messageY);
			}
			int counter = messageCounter.get(i) + 1; // messageCounter++
			messageCounter.set(i, counter); // set the counter to the array
			messageY += 30;
			
			if(messageCounter.get(i) > 180) {
				message.remove(i);
				messageCounter.remove(i);
			}
		}
	}
	public void drawPlayerLife() {
	
		int x = gp.tileSize/2;
		int i = 0;
		if(playerLifeAnimationCounter > 8) {
			// ADJUST THE PLAYER LIVES' Y LEVELS AND DIRECTION;
			for(i = 0;i < playerLifePositionY.length; i++) {
				if (playerLifeDirections[i] == "up") {
					if(playerLifePositionY[i] < highestBoundY ) {
						playerLifeDirections[i] = "down";
					}
				}
				else if (playerLifeDirections[i] == "down") {
					if(playerLifePositionY[i] > lowestBoundY ) {
						playerLifeDirections[i] = "up";

					}
				}
				switch(playerLifeDirections[i]) {
					case("down"): playerLifePositionY[i]+=1; break;
					case("up"): playerLifePositionY[i]-=1; break;
				}

			}	
			playerLifeAnimationCounter = 0;
		}
		// DRAW EACH LIFE
		for(i = 0;i < gp.player.playerLives; i++) {
			g2.drawImage(gp.player.right1, x, playerLifePositionY[i], (gp.tileSize*2)/3,(gp.tileSize*2)/3, null);
			x += 48;
		}
		playerLifeAnimationCounter++;





		
//		// DRAW BLANK HEART
//		while(i < gp.player.maxLife/2) {
//			g2.drawImage(health_empty, x, y, gp.tileSize, gp.tileSize, null);
//			i++;
//			x += gp.tileSize*2/3;
//		}
//
//		// RESET
//		x = gp.tileSize/2;
//		y = gp.tileSize/2;
//		i = 0;
//		
//		// DRAW CURRENT LIFE
//		while(i < gp.player.currentLife) {
//			g2.drawImage(health_half, x, y, gp.tileSize, gp.tileSize, null);
//			i++;
//			if( i < gp.player.currentLife) {
//				g2.drawImage(health_full, x, y, gp.tileSize, gp.tileSize, null);
//			}
//			i++;
//			x += gp.tileSize*2/3;
//			
//		}

		
	}
	public void drawTitleScreen() {
		if(titleScreenState == 0) {
			g2.setColor(new Color(0, 24, 13));
			g2.fillRect(0, 0, gp.screenWidth, gp.screenHeight);
			// TITLE NAME
			g2.setFont(g2.getFont().deriveFont(Font.PLAIN, 40));
			String text = "BLACKFISH";
			int x = getXforCenteredText(text);
			int y = gp.tileSize*5-32;
			
			// SHADOW
			g2.setColor(new Color(54, 130, 127));
			g2.drawString(text, x+5, y+5);
			
			// TITLE
			g2.setColor(Color.white);
			g2.drawString(text, x, y);
			
			// TOG IMAGE
			x = gp.screenWidth/2 - (gp.tileSize*2)/2 ;
			y += gp.tileSize*1.5;
			if (spriteCounter > 8) {
				spriteNum++;

				if (spriteNum > 4) {
					spriteNum = 1;
				}
				spriteCounter = 0;
			}
			if (spriteNum == 1) {
				image = gp.player.right1;
			}
			if (spriteNum == 2) {
				image = gp.player.right2;
			}
			if (spriteNum == 3) {
				image = gp.player.right3;
			}
			if (spriteNum == 4) {
				image = gp.player.right4;
			}
			g2.drawImage(image, gp.screenWidth / 2 - (gp.tileSize / 2), gp.screenHeight / 2 - (gp.tileSize / 2), gp.tileSize, gp.tileSize, null);
			spriteCounter++;
			
			// MENU
			g2.setFont(g2.getFont().deriveFont(Font.PLAIN, 20));
			text = "PLAY";
			x = getXforCenteredText(text)-gp.tileSize;
			y += gp.tileSize*2;
			g2.drawString(text, x, y);
			if(commandNum == 0) {
				g2.drawString(">", x-32, y);
			}
//			text = "LOAD GAME";
//			x = getXforCenteredText(text);
//			y += gp.tileSize;
//			g2.drawString(text, x, y);
//			if(commandNum == 1) {
//				g2.drawString(">", x-gp.tileSize, y);
//			}
			
			text = "QUIT";
			x = getXforCenteredText(text)+gp.tileSize;
//			y += gp.tileSize;
			g2.drawString(text, x, y);
			if(commandNum == 1) {
				g2.drawString(">", x-32, y);
			}
		}
		else if(titleScreenState == 1) {
			// CLASS SELECTION SCREEN
			g2.setColor(Color.white);
			g2.setFont(g2.getFont().deriveFont(Font.PLAIN, 36));
			
			String text = "Select your class!";
			int x = getXforCenteredText(text);
			int y = gp.tileSize*3;
			g2.drawString(text,  x,  y);
			
			text = "Fish";
			x = getXforCenteredText(text);
			y += gp.tileSize*3;
			g2.drawString(text,  x,  y);
			if(commandNum == 0) {
				g2.drawString(">", x-gp.tileSize, y);
			}
			
			text = "Fishy";
			x = getXforCenteredText(text);
			y += gp.tileSize;
			g2.drawString(text,  x,  y);
			if(commandNum == 1) {
				g2.drawString(">", x-gp.tileSize, y);
			}
			
			text = "Fishiest";
			x = getXforCenteredText(text);
			y += gp.tileSize;
			g2.drawString(text,  x,  y);
			if(commandNum == 2) {
				g2.drawString(">", x-gp.tileSize, y);
			}
			
			text = "Back";
			x = getXforCenteredText(text);
			y += gp.tileSize;
			g2.drawString(text,  x,  y);
			if(commandNum == 3) {
				g2.drawString(">", x-gp.tileSize, y);
			}
		}
	}

	public void drawPauseScreen() {
		String text = "PAUSE";
		int x = getXforCenteredText(text);
		int y = gp.screenHeight/2;
		g2.drawString(text, x, y);
	}
	public void drawDialogueScreen() {
		
		
		
		int x = gp.tileSize*3; 
		if(dialogueBoxAnimationCounter > 6) {
			// ADJUST THE DIALOGUE BOX'S Y LEVELS AND DIRECTION;
			if (dialogueBoxDirection == "up") {
				if(dialogueBoxY < highestBoundDialogueBoxY ) {
					dialogueBoxDirection = "down";
				}
			}
			else if (dialogueBoxDirection == "down") {
				if(dialogueBoxY > lowestBoundDialogueBoxY ) {
					dialogueBoxDirection = "up";

				}
			}
			switch(dialogueBoxDirection) {
				case("down"): dialogueBoxY+=1; break;
				case("up"): dialogueBoxY-=1; break;
			}
			dialogueBoxAnimationCounter = 0;
		}	
		dialogueBoxAnimationCounter++;
		
		// WINDOW
		int width = gp.screenWidth - (gp.tileSize*6); 
		
		System.out.println("before draw box" + gp.gameState +" "+gp.dialogueState);
		drawDialogueWindow(x, dialogueBoxY, width, dialogueBoxHeight);
		System.out.println("after draw box");

		g2.setColor(new Color(209, 209, 209));
		g2.setFont(g2.getFont().deriveFont(Font.PLAIN, 14));
		if(npc.type == npc.type_npc) {
			g2.setColor(new Color(209, 209, 209));
//			drawDialogueWindow(x, dialogueBoxY-gp.tileSize, width,  40);
			g2.setColor(Color.white);
			g2.drawString(npc.name , (gp.tileSize*13)/4, dialogueBoxY-20);
		}

		
		x = (gp.tileSize*13)/4;
		int speakerBoxY = dialogueBoxY + 36;
		int instructionTextY = dialogueBoxY;
		if(npc.dialogues[npc.dialogueSet][npc.dialogueIndex] != null) {
			char characters[] = npc.dialogues[npc.dialogueSet][npc.dialogueIndex].toCharArray();
			// letter by letter
			if(pauseAfterSentence == true) {
				pauseAfterSentenceCounter++;
				if(pauseAfterSentenceCounter > 30) {
					pauseAfterSentenceCounter = 0;
					pauseAfterSentence = false;
				}
			}
			if(charIndex < characters.length && pauseAfterSentence == false) {
				String s = String.valueOf(characters[charIndex]);	

				if(s.compareTo(".") == 0) {
					pauseAfterSentence = true;
				}
				gp.playSE(13);
				combinedText = combinedText+s;
				currentDialogue = combinedText;
				charIndex++;
			}

			if (gp.keyH.enterPressed == true) {
				System.out.println("enterPressed! " + npc.dialogueIndex);
				charIndex = 0;
				combinedText = "";
				if(gp.gameState == gp.dialogueState || gp.gameState == gp.cutSceneState) {
					// conversation continues
					npc.dialogueIndex++;
					gp.keyH.enterPressed = false;
				}
			}
		}
		else {
			// conversation is over
			npc.dialogueIndex = 0;
			if(gp.gameState == gp.dialogueState) {
				gp.gameState = gp.playState;
			}
			if(gp.gameState == gp.cutSceneState) {
				
				gp.csManager.scenePhase++;
			}
		}
		
		for(String line : currentDialogue.split("\n")) {
			g2.drawString(line, x, speakerBoxY);
			speakerBoxY += 40; 
		}
		
		g2.setFont(g2.getFont().deriveFont(Font.PLAIN, 8F));
		String text = "Press [B] to continue";
		int textX = getXforCenteredText(text);
		g2.drawString(text, textX, instructionTextY + dialogueBoxHeight - 22);
	}
	public void drawCharacterScreen	() {
		
		// CREATE A FRAME
		int frameHeight = gp.tileSize*3-30;
		int frameWidth = gp.screenWidth - (gp.tileSize*8); 
		int frameX = gp.screenWidth - ((frameWidth/2)+frameWidth); 
		int frameY = gp.tileSize;
		characterFrameHeight = frameHeight;
		characterFrameY = frameY;
		drawSubWindow(frameX, frameY, frameWidth, frameHeight);
		
		// TEXT
		g2.setColor(Color.white);
		g2.setFont(g2.getFont().deriveFont(18F));
		int textX = frameX + 20;
		int textY = frameY + 35;
		final int lineHeight = 32;
		
		// NAME 
//		g2.drawString("Level", textX, textY);
//		textY += lineHeight;
		g2.drawString("Life", textX, textY);
		textY += lineHeight;
//		g2.drawString("Bite Strength", textX, textY);
//		textY += lineHeight;
		g2.drawString("Attack", textX, textY);
		textY += lineHeight + 15;
//		g2.drawString("Defense", textX, textY);
//		textX = frameX + gp.tileSize*7;
//		textY = frameY + 35;
//		textY += lineHeight;
//		g2.drawString("Exp", textX, textY);
//		textY += lineHeight;
//		g2.drawString("Next Level", textX, textY);
//		textY += lineHeight;
//		g2.drawString("Coin", textX, textY);
//		textY += lineHeight + 10;
		g2.drawString("Weapon", textX, textY);
		textY += lineHeight;
//		g2.drawString("Shield", textX, textY);
//		textY += lineHeight;
		g2.setFont(g2.getFont().deriveFont(Font.PLAIN, 8F));
		String text = "Press [B] to equip a weapon";
		textX = getXforCenteredText(text);
		g2.drawString(text, textX, textY);
		
		// VALUES
		textX = frameX + 20;
		int tailX = (frameX + frameWidth) - 30;
		g2.setFont(g2.getFont().deriveFont(Font.PLAIN, 18F));
		// Reset textY
		textY = frameY + 35;
		String value;
//		value = String.valueOf(gp.player.level);
//		textX = getXforAlignToRight(value, tailX);
//		g2.drawString(value, textX, textY);
//		textY += lineHeight;
		
		value = String.valueOf(gp.player.currentLife + "/" + gp.player.maxLife);
		textX = getXforAlignToRight(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
//		value = String.valueOf(gp.player.biteStrength);
//		textX = getXforAlignToRight(value, tailX);
//		g2.drawString(value, textX, textY);
//		textY += lineHeight;
		
		value = String.valueOf(gp.player.attack);
		textX = getXforAlignToRight(value, tailX);
		g2.drawString(value, textX, textY);
		textY += lineHeight;
		
//		value = String.valueOf(gp.player.defense);
//		textX = getXforAlignToRight(value, tailX);
//		g2.drawString(value, textX, textY);
//		textY += lineHeight;
		
//		value = String.valueOf(gp.player.exp);
//		textX = getXforAlignToRight(value, tailX);
//		g2.drawString(value, textX, textY);
//		textY += lineHeight;
//		
//		value = String.valueOf(gp.player.nextLevelExp);
//		textX = getXforAlignToRight(value, tailX);
//		g2.drawString(value, textX, textY);
//		textY += lineHeight;
		
//		value = String.valueOf(gp.player.coin);
//		textX = getXforAlignToRight(value, tailX);
//		g2.drawString(value, textX, textY);
//		textY += lineHeight;
		if (gp.player.currentWeapon !=null) {
			if(gp.player.currentWeapon.image != null) {
				g2.drawImage(gp.player.currentWeapon.image, tailX - gp.tileSize, textY-25, null);
			}
			else {
				g2.drawImage(gp.player.currentWeapon.down1, tailX - gp.tileSize, textY-25, null);
			}		
		}
//		textY += gp.tileSize;
//		if (gp.player.currentShield !=null) {
//			g2.drawImage(gp.player.currentShield.down1, tailX - gp.tileSize, textY-15, null);
//		}

	}
	public void drawSubWindow(int x, int y, int width, int height) {
		Color c = new Color(0, 24, 13);
		g2.setColor(c);
		g2.fillRoundRect(x, y,  width,  height, 0, 0);
		
		g2.setStroke(new BasicStroke(6));
		g2.setColor(Color.black);
		g2.drawRoundRect(x-2, y-2,  width+8,  height+8, 0, 0);
		
		c = new Color(54, 130, 127);
		g2.setColor(c);
		g2.setStroke(new BasicStroke(4));
		g2.drawRoundRect(x-2, y-2,  width+4,  height+4, 0, 0);
	}
	public void drawDialogueWindow(int x, int y, int width, int height) {
		Color c = new Color(0, 24, 13);
		g2.setColor(c);
		g2.fillRoundRect(x, y,  width,  height, 0, 0);
		
		c = new Color(23,82,74);
		g2.setColor(c);
		g2.setStroke(new BasicStroke(3));
		g2.drawRoundRect(x-1, y-1, width+2, height+2, 0, 0);
	}
	public int getXforAlignToRight(String text, int tailX) {
		int length = (int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x = tailX - length;
		return x;

	}
 	public int getXforCenteredText(String text) {
		int textLength = (int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
		int x = gp.screenWidth/2 - textLength/2;
		return x;
	}
		
		
//		if(gameFinished == true) {
//			g2.setFont(din_80B);
//			g2.setColor(Color.white);
//			
//			String text;
//			int textLength;
//			int x;
//			int y;
//			
//			text = "YOU WIN";
//			textLength = (int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
//			x = gp.screenWidth/2 - textLength/2;
//			y = gp.screenHeight/2 - (gp.tileSize);
//			g2.drawString(text,  x,  y);
//			
////			gp.gameThread = null;
//			
//
//		}
//		else {
//			String keys = String.valueOf(gp.player.hasKey);
//			
//			g2.setFont(din_24);
//			g2.setColor(Color.white);
////			g2.drawImage(keyImage, 28, 22, gp.tileSize/2, gp.tileSize/2, null);
////			g2.drawString(keys, 65, 48);
//			
//			// MESSAGE
//			if(messageOn == true) {
//				g2.setFont(din_24);
//				g2.drawString(message, 500, 48);
//				
//				messageCounter++;
//				if(messageCounter > 120) {
//					messageCounter = 0;
//					messageOn = false;
//				}
//			}
//		}
}
