package entity;

import main.KeyHandler;
import main.UtilityTool;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

import main.GamePanel;

public class Player extends Entity {

	KeyHandler keyH;
	public final int screenX;
	public final int screenY;
	public int hasKey = 0;

	public Player(GamePanel gp, KeyHandler keyH) {
		super(gp);
		
		this.keyH = keyH;
		screenX = gp.screenWidth / 2 - (gp.tileSize / 2);
		screenY = gp.screenHeight / 2 - (gp.tileSize / 2);

		solidArea = new Rectangle(8, 8, gp.tileSize*2/3, gp.tileSize*2/5);

		solidAreaDefaultX = solidArea.x;
		solidAreaDefaultY = solidArea.y;

		setDefaultValues();
		getPlayerImage();
		getPlayerAttackImage();
	}

	public void setDefaultValues() {
		// STARTING POSITION
		worldX = gp.tileSize * 6;
		worldY = gp.tileSize * 16;
		speed = 4;
		direction = "right";
		prevDirection = "right";
		
		// PLAYER STATUS
		maxLife = 6;
		currentLife = maxLife;

	}

	public void getPlayerImage() {
		up1 = setup("/player/tog_right_1", gp.tileSize, gp.tileSize);
		up2 = setup("/player/tog_right_2", gp.tileSize, gp.tileSize);
		up3 = setup("/player/tog_right_3", gp.tileSize, gp.tileSize);
		up4 = setup("/player/tog_right_4", gp.tileSize, gp.tileSize);
		up5 = setup("/player/tog_left_1", gp.tileSize, gp.tileSize);
		up6 = setup("/player/tog_left_2", gp.tileSize, gp.tileSize);
		up7 = setup("/player/tog_left_3", gp.tileSize, gp.tileSize);
		up8 = setup("/player/tog_left_4", gp.tileSize, gp.tileSize);
		down1 = setup("/player/tog_right_1", gp.tileSize, gp.tileSize);
		down2 = setup("/player/tog_right_2", gp.tileSize, gp.tileSize);
		down3 = setup("/player/tog_right_3", gp.tileSize, gp.tileSize);
		down4 = setup("/player/tog_right_4", gp.tileSize, gp.tileSize);
		down5 = setup("/player/tog_left_1", gp.tileSize, gp.tileSize);
		down6 = setup("/player/tog_left_2", gp.tileSize, gp.tileSize);
		down7 = setup("/player/tog_left_3", gp.tileSize, gp.tileSize);
		down8 = setup("/player/tog_left_4", gp.tileSize, gp.tileSize);
		left1 = setup("/player/tog_left_1", gp.tileSize, gp.tileSize);
		left2 = setup("/player/tog_left_2", gp.tileSize, gp.tileSize);
		left3 = setup("/player/tog_left_3", gp.tileSize, gp.tileSize);
		left4 = setup("/player/tog_left_4", gp.tileSize, gp.tileSize);
		right1 = setup("/player/tog_right_1", gp.tileSize, gp.tileSize);
		right2 = setup("/player/tog_right_2", gp.tileSize, gp.tileSize);
		right3 = setup("/player/tog_right_3", gp.tileSize, gp.tileSize);
		right4 = setup("/player/tog_right_4", gp.tileSize, gp.tileSize);
	}
	public void getPlayerAttackImage() {
		attackUp1 = setup("/player/tog_attack_right_1", gp.tileSize*2, gp.tileSize);
		attackUp2 = setup("/player/tog_attack_right_2", gp.tileSize*2, gp.tileSize);
		attackUp3 = setup("/player/tog_attack_right_3", gp.tileSize*2, gp.tileSize);
		attackUp4 = setup("/player/tog_attack_right_4", gp.tileSize*2, gp.tileSize);
		attackUp5 = setup("/player/tog_left_1", gp.tileSize*2, gp.tileSize);
		attackUp6 = setup("/player/tog_left_2", gp.tileSize*2, gp.tileSize);
		attackUp7 = setup("/player/tog_left_3", gp.tileSize*2, gp.tileSize);
		attackUp8 = setup("/player/tog_left_4", gp.tileSize*2, gp.tileSize);
		attackDown1 = setup("/player/tog_attack_right_1", gp.tileSize*2, gp.tileSize);
		attackDown2 = setup("/player/tog_attack_right_2", gp.tileSize*2, gp.tileSize);
		attackDown3 = setup("/player/tog_attack_right_3", gp.tileSize*2, gp.tileSize);
		attackDown4 = setup("/player/tog_attack_right_4", gp.tileSize*2, gp.tileSize);
		attackDown5 = setup("/player/tog_left_1", gp.tileSize*2, gp.tileSize);
		attackDown6 = setup("/player/tog_left_2", gp.tileSize*2, gp.tileSize);
		attackDown7 = setup("/player/tog_left_3", gp.tileSize*2, gp.tileSize);
		attackDown8 = setup("/player/tog_left_4", gp.tileSize*2, gp.tileSize);
		attackLeft1 = setup("/player/tog_left_1", gp.tileSize*2, gp.tileSize);
		attackLeft2 = setup("/player/tog_left_2", gp.tileSize*2, gp.tileSize);
		attackLeft3 = setup("/player/tog_left_3", gp.tileSize*2, gp.tileSize);
		attackLeft4 = setup("/player/tog_left_4", gp.tileSize*2, gp.tileSize);
		attackRight1 = setup("/player/tog_attack_right_1", gp.tileSize*2, gp.tileSize);
		attackRight2 = setup("/player/tog_attack_right_2", gp.tileSize*2, gp.tileSize);
		attackRight3 = setup("/player/tog_attack_right_3", gp.tileSize*2, gp.tileSize);
		attackRight4 = setup("/player/tog_attack_right_4", gp.tileSize*2, gp.tileSize);
	}

	public void update() {

//		now sprite animates even when key is not pressed

			spriteCounter++;
			// update() is called 10 times every second
			// switches between two animation frames
			
			if(attacking == true) {
				attacking();
			}
			//check for key press to change direction  
			else if (keyH.upPressed == true || keyH.downPressed == true || keyH.leftPressed == true
					|| keyH.rightPressed == true || keyH.enterPressed == true) {

				if (keyH.upPressed == true) {
					direction = "up";
				} else if (keyH.downPressed == true) {
					direction = "down";
				} else if (keyH.leftPressed == true) {
					direction = "left";
				} else if (keyH.rightPressed == true) {
					direction = "right";
				}

				// Check tile collision
				collisionOn = false;
				gp.cChecker.checkTile(this);

				// Check object collision
				int objIndex = gp.cChecker.checkObject(this, true);
				pickUpObject(objIndex);

				// Check npc collision
				int npcIndex = gp.cChecker.checkEntity(this, gp.npc);
				interactNPC(npcIndex);

				// Check monster collision
				int monsterIndex = gp.cChecker.checkEntity(this, gp.monster);	
				contactMonster(monsterIndex);
				
				// Check event
				gp.eHandler.checkEvent();
				
				
				// If collision is false, player can move
				if (collisionOn == false && keyH.enterPressed == false) {
					switch (direction) {
					case "up": worldY -= speed; break;
					case "down": worldY += speed; break;
					case "left": worldX -= speed; break;
					case "right": worldX += speed; break;
					}
				}
				gp.keyH.enterPressed = false;
				
				if (spriteCounter > 8) {
					spriteNum++;
					if (spriteNum > 4) {
						spriteNum = 1;
					}
					spriteCounter = 0;
				}

			}
			
			if(invincible == true) {
				invincibleCounter++;
				if(invincibleCounter > 60) {
					invincible = false;
					invincibleCounter = 0;
				}
			}


	}
	public void attacking() {
		if(spriteCounter <= 5) {
			spriteNum = 1;
		}
		if(spriteCounter > 5 && spriteCounter <= 10) {
			spriteNum = 2;
		}
		if(spriteCounter > 10 && spriteCounter <= 15) {
			spriteNum = 3;
		}
		if(spriteCounter > 15 && spriteCounter <= 25) {
			spriteNum = 4;
		}
		if(spriteCounter > 25) {
			spriteNum= 1;
			spriteCounter = 0;
			attacking = false;
		}
	}
	public void pickUpObject(int i) {
		if (i != 999) {
			String objectName = gp.obj[i].name;

			switch (objectName) {
			case "Key":
				gp.playSE(2);
				hasKey++;
				gp.obj[i] = null;
				gp.ui.showMessage("You got a key!");
				break;
			case "Door":
				gp.playSE(2);
				if (hasKey > 0) {
					gp.obj[i] = null;
					hasKey--;
					gp.ui.showMessage("You opened the door!");

				}
				else {
					gp.ui.showMessage("You need a key!");
				}
				break;
			case "Chest":
				gp.obj[i] = null;
				gp.ui.gameFinished = true;
				gp.stopMusic();
				gp.playSE(2);
				break;
			case "Boots":
				gp.playSE(2);
				speed += 3;
				gp.obj[i] = null;
				gp.ui.showMessage("SPEED UP");

				break;
			}
		}
	}
	public void interactNPC(int i) {
		
		if(gp.keyH.enterPressed == true) {
			if(i != 999) {
				gp.gameState = gp.dialogueState;
				gp.npc[i].speak();
			}
			else {
				attacking = true;
			}
		}
	}
	public void contactMonster(int i) {
		if(i != 999) {
			if (invincible == false) {
				currentLife -= 1;
				invincible = true;
			}
		}
	}
	public void draw(Graphics2D g2) {

		BufferedImage image = null;

		switch (direction) {
		case "up":
			if(attacking == false) {
				if (spriteNum == 1) {
					image = up1;
					if(prevDirection == "left") {
						image = up5;
					}
				}
				if (spriteNum == 2) {
					image = up2;
					if(prevDirection == "left") {
						image = up6;
					}
				}
				if (spriteNum == 3) {
					image = up3;
					if(prevDirection == "left") {
						image = up7;
					}
				}
				if (spriteNum == 4) {
					image = up4;
					if(prevDirection == "left") {
						image = up8;
					}
				}
			}
			else if(attacking == true) {
				if (spriteNum == 1) {
					image = attackUp1;
					if(prevDirection == "left") {
						image = attackUp5;
					}
				}
				if (spriteNum == 2) {
					image = attackUp2;
					if(prevDirection == "left") {
						image = attackUp6;
					}
				}
				if (spriteNum == 3) {
					image = attackUp3;
					if(prevDirection == "left") {
						image = attackUp7;
					}
				}
				if (spriteNum == 4) {
					image = attackUp4;
					if(prevDirection == "left") {
						image = attackUp8;
					}
				}
			}
			break;
		case "down":
			if(attacking == false) {
				if (spriteNum == 1) {
					image = down1;
					if(prevDirection == "left") {
						image = down5;
					}
				}
				if (spriteNum == 2) {
					image = down2;
					if(prevDirection == "left") {
						image = down6;
					}
				}
				if (spriteNum == 3) {
					image = down3;
					if(prevDirection == "left") {
						image = down7;
					}
				}
				if (spriteNum == 4) {
					image = down4;
					if(prevDirection == "left") {
						image = down8;
					}
				}
			}
			else if(attacking == true) {
				if (spriteNum == 1) {
					image = attackDown1;
					if(prevDirection == "left") {
						image = attackDown5;
					}
				}
				if (spriteNum == 2) {
					image = attackDown2;
					if(prevDirection == "left") {
						image = attackDown6;
					}
				}
				if (spriteNum == 3) {
					image = attackDown3;
					if(prevDirection == "left") {
						image = attackDown7;
					}
				}
				if (spriteNum == 4) {
					image = attackDown4;
					if(prevDirection == "left") {
						image = attackDown8;
					}
				}
			}
			break;
		case "left":
			prevDirection = "left";
			if(attacking == false) {
				if (spriteNum == 1) {
					image = left1;
				}
				if (spriteNum == 2) {
					image = left2;
				}
				if (spriteNum == 3) {
					image = left3;
				}
				if (spriteNum == 4) {
					image = left4;
				}
			}
			else if(attacking == true) {
				if (spriteNum == 1) {
					image = attackLeft1;
				}
				if (spriteNum == 2) {
					image = attackLeft2;
				}
				if (spriteNum == 3) {
					image = attackLeft3;
				}
				if (spriteNum == 4) {
					image = attackLeft4;
				}
			}
			break;
		case "right":
			prevDirection = "right";
			if(attacking == false) {
				if (spriteNum == 1) {
					image = right1;
				}
				if (spriteNum == 2) {
					image = right2;
				}
				if (spriteNum == 3) {
					image = right3;
				}
				if (spriteNum == 4) {
					image = right4;
				}
			}
			else if(attacking == true) {
				if (spriteNum == 1) {
					image = attackRight1;
				}
				if (spriteNum == 2) {
					image = attackRight2;
				}
				if (spriteNum == 3) {
					image = attackRight3;
				}
				if (spriteNum == 4) {
					image = attackRight4;
				}
			}
			break;
		}
		
		if(invincible == true) {
			g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.3f));
		}
//		System.out.println(spriteNum);
		g2.drawImage(image, screenX, screenY, null);
		
		// Reset alpha
		g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));

		
//		g2.setFont(new Font("Arial", Font.PLAIN, 26));
//		g2.setColor(Color.white);
//		g2.drawString("Invincible: "+invincibleCounter, 10, 400);
	}
}
